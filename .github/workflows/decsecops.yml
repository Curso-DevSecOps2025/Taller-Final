name: DevSecOps Pipeline

on:
  push:
    branches: [ main, dev-br ]
  pull_request:
    branches: [ main ]

jobs:
  security-pipeline:
    runs-on: ubuntu-latest
    
    steps:
    # 1. Clonación del repositorio
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 2. Setup Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    # Install dependencies
    - name: Install dependencies
      run: npm install

    # 3. SAST - SonarCloud Analysis
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.KEY_GIT_TOKEN }}
        SONAR_TOKEN: ${{ secrets.TOKEN_SONAR_TALLERFINAL }}
      with:
        args: >
          -Dsonar.projectKey=movies-app-devsecops
          -Dsonar.organization=tu-organizacion
          -Dsonar.sources=.
          -Dsonar.exclusions=node_modules/**,coverage/**,**/*.test.js
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

    # Check SonarCloud Quality Gate
    - name: Check SonarCloud Quality Gate
      run: |
        echo "Checking SonarCloud Quality Gate..."
        # This step will fail if quality gate fails (Critical, High, Medium vulnerabilities)
        curl -u ${{ secrets.TOKEN_SONAR_TALLERFINAL }}: \
          "https://sonarcloud.io/api/qualitygates/project_status?projectKey=Taller-Final" \
          | jq -e '.projectStatus.status == "OK"'

    # 4. SCA - Dependency Check
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'movies-app'
        path: '.'
        format: 'JSON'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 4
          --out reports

    # Check Dependency Vulnerabilities
    - name: Check Dependency Vulnerabilities
      run: |
        if [ -f "reports/dependency-check-report.json" ]; then
          # Check for Critical, High, or Medium vulnerabilities
          CRITICAL=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "CRITICAL")] | length' reports/dependency-check-report.json)
          HIGH=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "HIGH")] | length' reports/dependency-check-report.json)
          MEDIUM=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "MEDIUM")] | length' reports/dependency-check-report.json)
          
          echo "Critical vulnerabilities: $CRITICAL"
          echo "High vulnerabilities: $HIGH"
          echo "Medium vulnerabilities: $MEDIUM"
          
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ] || [ "$MEDIUM" -gt 0 ]; then
            echo "❌ Pipeline failed: Found Critical, High, or Medium vulnerabilities in dependencies"
            exit 1
          fi
        fi

    # 5. Construcción de Imagen Docker
    - name: Build Docker Image
      run: |
        docker build -t movies-app:${{ github.sha }} .
        docker tag movies-app:${{ github.sha }} movies-app:latest

    # 6. Image Security - Trivy Scan
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'movies-app:latest'
        format: 'json'
        output: 'trivy-results.json'
        exit-code: '0'

    # Check Image Vulnerabilities
    - name: Check Image Security
      run: |
        if [ -f "trivy-results.json" ]; then
          CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-results.json)
          HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-results.json)
          MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' trivy-results.json)
          
          echo "Critical vulnerabilities: $CRITICAL"
          echo "High vulnerabilities: $HIGH"
          echo "Medium vulnerabilities: $MEDIUM"
          
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ] || [ "$MEDIUM" -gt 0 ]; then
            echo "❌ Pipeline failed: Found Critical, High, or Medium vulnerabilities in Docker image"
            exit 1
          fi
        fi

    # 7. Despliegue de la aplicación (Docker local)
    - name: Deploy Application
      run: |
        echo "Deploying application..."
        docker run -d -p 3000:3000 --name movies-app movies-app:latest
        sleep 10
        # Verificar que la aplicación esté corriendo
        curl -f http://localhost:3000 || exit 1

    # 8. DAST - OWASP ZAP Analysis
    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    # Upload reports as artifacts
    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          reports/
          trivy-results.json
          report_html.html
          report_json.json

    # Cleanup
    - name: Cleanup
      if: always()
      run: |
        docker stop movies-app || true
        docker rm movies-app || true
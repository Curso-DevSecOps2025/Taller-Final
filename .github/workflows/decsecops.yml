name: Pipeline DevSecOps

on:
  push:
    branches: [ main, dev-br ]
  pull_request:
    branches: [ main ]

jobs:
  security-pipeline:
    runs-on: ubuntu-latest
	
    steps:
	# 1. Clonar repositorio
    - name: Checkout code
    uses: actions/checkout@v4
    with:
        fetch-depth: 0

	# 2. Configurar Node.js
    - name: Setup Node.js
    uses: actions/setup-node@v4
    with:
		node-version: '18'
        cache: 'npm'

	# Instalar dependencies
    - name: Instalar dependencias
    run: npm install

	# 3. SAST - SonarCloud Analisis
    - name: Scanner SonarQube
		on:
        push:
            branches:
                - dev-branch
        workflow_dispatch:

        jobs:
            sonarqube:
            runs-on: ubuntu-latest

            steps:
                - name: Checkout code
                uses: actions/checkout@v4
                with:
                fetch-depth: 0  

                - name: Set up JDK 17
                uses: actions/setup-java@v2
                with:
						java-version: '17'
                        distribution: 'adopt'
                        
                - name: Construir Proyecto
                run: |
                chmod +x ./gradlew
                ./gradlew build

							
				- name: Correr Scan SonarCloud
                uses: SonarSource/sonarcloud-github-action@master
                env:
						GITHUB_TOKEN: ${{ secrets.KEY_GIT_TOKEN }}
                        SONAR_TOKEN: ${{ secrets.Token-Sonar-TalleFinal }}
                    with:
					args: |
						-Dsonar.projectKey=curso-devsecops2025_Taller-Final
						-Dsonar.organization="curso-devsecops2025"
						-Dsonar.sources=.
						-Dsonar.exclusions="node_modules/**,coverage/**,**/*.test.js"
						-Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
				
		#3 Check SonarCloud Quality Gate
			- name: Check SonarCloud Quality Gate
			  run: |
				echo "Checking SonarCloud Quality Gate..."
				# This step will fail if quality gate fails (Critical, High, Medium vulnerabilities)
				curl -u ${{ secrets.TOKEN_SONAR_TALLERFINAL }}: \
				  "https://sonarcloud.io/api/qualitygates/project_status?projectKey=movies-app-devsecops" | jq -e '.projectStatus.status == "OK"'

		# 4. SCA - Chequear Dependencia
			- name: Correr OWASP Dependency Check
				uses: dependency-check/Dependency-Check_Action@main
				  with:
					project: 'movies-app'
					path: '.'
					format: 'JSON'
					args: >
					  --enableRetired
					  --enableExperimental
					  --failOnCVSS 4
					  --out reports

			# Chequear Vulnerabilidad Dependencia 
			- name: Chequea Vulnerabilidades de Dependencia
				run: |
						if [ -f "reports/dependency-check-report.json" ]; then
							  # Chequeo de Criticidad de vulnerabilidades
							  CRITICA=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "CRITICA")] | length' reports/dependency-check-report.json)
							  ALTA=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "ALTA")] | length' reports/dependency-check-report.json)
							  MEDIA=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "MEDIA")] | length' reports/dependency-check-report.json)
							  
							  echo "Vulnerabilidad Critica: $CRITICA"
							  echo "Vulnerabilidad: $ALTA"
							  echo "Vulnerabilidad Media: $MEDIA"
							  
							  if [ "$CRITICA" -gt 0 ] || [ "$ALTA" -gt 0 ] || [ "$MEDIA" -gt 0 ]; then
								echo "Pipeline fallido: Vulnerabilidad Critica, Alta, o Media"
								exit 1
							  fi
						fi

			# 5. Construcción de Imagen Docker
			- name: Construir Imagen Docker 
			  run: |
				docker build -t movies-app:${{ github.sha }} .
				docker tag movies-app:${{ github.sha }} movies-app:latest

			# 6. Imagen Seguridad - Scan Trivy
			- name: Correr Scanner Trivy
			  uses: aquasecurity/trivy-action@master
			  with:
				image-ref: 'movies-app:latest'
				format: 'json'
				output: 'trivy-results.json'
				exit-code: '0'

			# Chequear Imagen Vulnerabilidad
			- name: Chequea Imagen Securidad
			  run: |
				if [ -f "trivy-results.json" ]; then
				  CRITICA=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICA")] | length' trivy-results.json)
				  ALTA=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "ALTA")] | length' trivy-results.json)
				  MEDIA=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIA")] | length' trivy-results.json)
				  
				  echo "Vulnerabilidad Critica: $CRITICA"
				  echo "Vulnerabilidad Alta: $ALTA"
				  echo "vulnerabilidad Media: $MEDIA"
				  
				  if [ "$CRITICA" -gt 0 ] || [ "$ALTA" -gt 0 ] || [ "$MEDIA" -gt 0 ]; then
					echo "Pipeline faillido: Errores Criticos, Altos, o Medios en la imagen de Docker"
					exit 1
				  fi
				fi

			# 7. Despliegue de la aplicación (Docker local)
			- name: Deployar aplicacion
			  run: |
				echo "Deployando aplicacion..."
				docker run -d -p 3000:3000 --name movies-app movies-app:latest
				sleep 10
				# Verificar que la aplicación esté corriendo
				curl -f http://localhost:3000 || exit 1

			# 8. DAST - OWASP ZAP Analisis
			- name: Scanner OWASP ZAP
			  uses: zaproxy/action-baseline@v0.10.0
			  with:
				target: 'http://localhost:3000'
				rules_file_name: '.zap/rules.tsv'
				cmd_options: '-a'

			# Carga reporte como artifact
			- name: Cargar Reporte de Seguridad
			  uses: actions/upload-artifact@v3
				if: always()
				  with:
					name: security-reports
					path: |
					  reports/
					  trivy-results.json
					  report_html.html
					  report_json.json

			# Limpieza
			- name: Cleanup
				if: always()
				  run: |
					docker stop movies-app || true
					docker rm movies-app || true
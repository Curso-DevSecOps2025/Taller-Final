name: DevSecOps Pipeline

on:
  push:
    branches: [ main, dev-br ]
  pull_request:
    branches: [ main ]

jobs:
  security-pipeline:
    runs-on: ubuntu-latest
    
    steps:
    # 1. Clonacion del repositorio
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 2. Configurar Node.js
    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    # 3. Instalar dependencies
    - name: Instalar dependencias
      run: npm install

    # 3.1 Crear directorio reports y archivos base
    - name: Inicializar directorio reports
      run: |
        mkdir -p reports
        echo "Los informes de seguridad se generarán aquí" > reports/README.md
        echo '{"scan_date": "'$(date)'", "status": "initialized"}' > reports/scan-status.json

    # 4. SAST SonarCloud Escaner
    - name: Scaner SonarCloud
      uses: SonarSource/sonarcloud-github-action@master
      env:
       GITHUB_TOKEN: ${{ secrets.KEY_GIT_TOKEN }}
       SONAR_TOKEN: ${{ secrets.TOKEN_SONAR_TALLERFINAL}}
       SONAR_PROJECT_KEY: Taller-Final
       SONAR_ORGANIZATION: curso-devsecops2025
      continue-on-error: true

    # 5. Chequear SonarCloud Quality Gate
    - name: Chequear SonarCloud Quality Gate
    run: |
     echo "Chequear SonarCloud Quality Gate..."
    RESPONSE=$(curl -u ${{ secrets.TOKEN_SONAR_TALLERFINAL }}: \
    "https://sonarcloud.io/api/qualitygates/project_status?projectKey=Taller-Final")
    STATUS=$(echo $RESPONSE | jq -r '.projectStatus.status')
    echo "Estado Quality Gate: $STATUS"
    if [ "$STATUS" != "OK" ]; then
        echo "Fallo Quality Gate!"
        echo "Response: $RESPONSE"
       exit 1
      else
      echo "✅ Quality Gate passed!"
     fi

    # 6. SCA - Dependency Check
    -name: Corre OWASP Dependency Check
    uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'curso-devsecops2025'
        path: '.'
        format: 'JSON'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 4
          --out reports

    # 7. Chequear Vulnerabilidad Dependencia
    - name: Chequea Vulnerabilidades de Dependencia
      run: |
        if [ -f "reports/dependency-check-report.json" ]; then
          # Chequear Vulnerabilidades Critica, Alta, o Media
          CRITICA=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "CRITICA")] | length' reports/dependency-check-report.json)
          ALTA=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "ALTA")] | length' reports/dependency-check-report.json)
          MEDIA=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "MEDIA")] | length' reports/dependency-check-report.json)
          
          echo "Vulnerabilidad Critica: $CRITICA"
          echo "Vulnerabilidad Alta: $ALTA"
          echo "Vulnerabilidad Media: $MEDIA"
          
          if [ "$CRITICA" -gt 0 ] || [ "$ALTA" -gt 0 ] || [ "$MEDIA" -gt 0 ]; then
            echo " Pipeline fallido: Vulnerabilidad Critica, Alta, o Media "
            exit 1
          fi
        fi

    # 8. Construccion de Imagen Docker
    - name: Construir Imagen Docker
      run: |
        docker build -t movies-app:${{ github.sha }} .
        docker tag movies-app:${{ github.sha }} movies-app:latest

    # 9. Imagen Seguridad - Scan Trivy
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'movies-app:latest'
        format: 'json'
        output: 'trivy-results.json'
        exit-code: '0'

    # 10. Chequear Imagen Vulnerabilidad
    - name: Chequear Imagen Seguridad
      run: |
        if [ -f "trivy-results.json" ]; then
          CRITICA=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICA")] | length' trivy-results.json)
          ALTA=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "ALTA")] | length' trivy-results.json)
          MEDIA=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIA")] | length' trivy-results.json)
          
          echo "Vulnerabilidad Critica: $CRITICA"
          echo "Vulnerabilidad Alta: $ALTA"
          echo "Vulnerabilidad Media: $MEDIA"
          
          if [ "$CRITICA" -gt 0 ] || [ "$ALTA" -gt 0 ] || [ "$MEDIA" -gt 0 ]; then
            echo " Pipeline fallido: Errores Criticos, Altos, o Medios en la imagen de Docker"
            exit 1
          fi
        fi

    # 11. Despliegue de la aplicación (Docker local)
    - name: Deployar Aplicacion
      run: |
        echo "Deployando aplicacion..."
        docker run -d -p 3000:3000 --name movies-app movies-app:latest
        sleep 10
        # Verificar que la aplicación esté corriendo
        curl -f http://localhost:3000 || exit 1

    # 12. DAST - OWASP ZAP Analisis
    - name: Zap Owasp Analisis
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    # 13. Carga reporte como artifacto
    - name: Carga Reporte Seguridad
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          reports/
          trivy-results.json
          report_html.html
          report_json.json

    # 14.Cleanup
    - name: Cleanup
      if: always()
      run: |
        docker stop movies-app || true
        docker rm movies-app || true